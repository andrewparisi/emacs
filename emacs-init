;; -*- mode: emacs-lisp -*-

(setq *start* (float-time))
(setq x-select-enable-clipboard t)

;; TODO: Find a better place for this maybe we need a general settings
;; section
(add-hook 'write-file-functions 'delete-trailing-whitespace)

(defmacro load! (load-string)
  (declare (indent defun))
  (let ((start (gensym "start")))
    `(let ((,start (float-time)))
       (load ,load-string)
       (message
	(format "done loading %s: %s"
		,load-string (- (float-time) ,start))))))

(setq user-mail-address  "")

(load! "~/.emacs.d/display.el")
(load! "~/.emacs.d/modules.el")
(load! "~/.emacs.d/splash.el")
(load! "~/.emacs.d/workspace.el")
(load! "~/.emacs.d/project.el")

;;; Custom Work Helpers
(load! "~/emacs-files/timesheet.el")
(load! "~/emacs-files/diary-helpers.el")
(load! "~/emacs-files/sql-session.el")
(load! "~/emacs-files/jira.el")

;; Custom Theme
(colors!
  :background            "#3b3b3f"
  :foreground            "#d0d0d0"
  :comment               "#8a8a8a"
  :string                "#ffc63f"
  :link                  (:foreground "red"     :weight 'bold)
  :constant              (:foreground "#ffc63f" :weight 'bold)
  :function              (:foreground "#18aed4" :weight 'bold)
  :keyword               (:foreground "#AFD75F" :weight 'bold)
  :type                  (:foreground "#18aed4")
  :font                  (:height 230)
  :transparency          ('alpha 90 90)
  :mode-line             (:foreground "#3b3b3f" :background "#d0d0d0")
  :mode-line-inactive    (:foreground "#3b3b3f" :background "#d0d0d0")
  :fringe                (:background "#d0d0d0"))

(mode-line!
  (:text " âš“ ")
  (:text (format-time-string "%H:%M ")
	 :color "#c45651")
  (:text  (mode-line-workspace))
  (:text " %*%+ ")
  (:text " %m: ")
  (:text "%b ")
  (:condition
   (vc-backend buffer-file-name)
   :text (format " |%s " vc-mode)
   :color "#30648e"))

;; Custom Bindings

(defun messages-buffer ()
  (interactive)
  (switch-to-buffer "*Messages*"))

(defun scratch-buffer ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun init-file ()
  (interactive)
  (find-file "~/.emacs.d/emacs-init"))

(defun modules-file()
  (interactive)
  (find-file "~/.emacs.d/modules.el"))

(defun core-file ()
  (interactive)
  (find-file "~/.emacs.d/core.el"))

(defun display-file ()
  (interactive)
  (find-file "~/.emacs.d/display.el"))

(defun keyboard-file ()
  (interactive)
  (find-file "~/.emacs.d/keyboard.el"))

(defun ivy-push-view-default-name ()
  (let* ((view (ivy--get-view-config))
         (view-name "{} organizer"))
    (when view-name
      (let ((x (assoc view-name ivy-views)))
        (if x
            (setcdr x (list view))
          (push (list view-name view) ivy-views))))))

(defun to-workspace-1 ()
  (interactive)
  (workspace-to-workspace-number 1))

(defun to-workspace-2 ()
  (interactive)
  (workspace-to-workspace-number 2))

(defun to-workspace-3 ()
  (interactive)
  (workspace-to-workspace-number 3))

(defun to-workspace-4 ()
  (interactive)
  (workspace-to-workspace-number 4))

(defun to-workspace-5 ()
  (interactive)
  (workspace-to-workspace-number 5))

(defun to-workspace-6 ()
  (interactive)
  (workspace-to-workspace-number 6))

(which-key-map evil-normal-state-map ","
  :labels
  ( "g"  "git"
    "gr" "code review"
    "i"  "init"
    "p"  "projectile"
    "s"  "s-expression"
    "w"  "workspaces"
    )
  :default-bindings
  (;; ibuffer
   "bi" 'ibuffer
   "bb" 'workspace-switch-buffer
   "bm" 'messages-buffer
   "bs" 'scratch-buffer
   "bw" 'save-buffer
   ;; org
   "c"   'org-capture
   ;; magit
   "gs"  'magit-status
   "gc"  'magit-branch-checkout
   "gb"  'magit-blame
   "gl"  'magit-log-current
   "gr" 'code-review-start
   "gh"  'git-timemachine
   ;; init
   "ii"  'init-file
   "im"  'modules-file
   "ic"  'core-file
   "id"  'display-file
   "ik"  'keyboard-file
   ;; projectile
   "p"   'projectile-command-map
   ;; s-expressions
   "sq"  'indent-pp-sexp
   "sl"  'forward-sexp
   "sh"  'backward-sexp
   "st"  'transpose-sexps
   "sf"  'move-sexp-forward
   "sb"  'move-sexp-back
   ;; tools
   "te"  'eshell
   "tp"  'project-switch-project
   "w1"  'to-workspace-1
   "w2"  'to-workspace-2
   "w3"  'to-workspace-3
   "w4"  'to-workspace-4
   "w5"  'to-workspace-5
   "w6"  'to-workspace-6
   "wd"  'workspace-pop
   ;; generic
   "x"  'counsel-M-x))

;;;;;;;;;;;;
;;; Projects

(defproject avicenna
  :project-dir "~/Documents/projects/avicenna"
  :website
  "https://github.com/reifyhealth/concept-data/tree/develop/avicenna"
  :init (my-cider-connect))

(defproject ri-match
  :project-dir "~/Documents/projects/concept-data/ri-match"
  :website "https://github.com/reifyhealth/concept-data/tree/develop/ri-match"
  :init (my-cider-connect))

(defproject data-drawings
  :project-dir "~/Documents/projects/data-diagrams"
  :website "https://github.com/reifyhealth/data-diagrams"
  :init
  (find-file
   "~/Documents/projects/data-diagrams/architecture_data_inference.org"))

(defproject data-warehouse
  :project-dir "~/Documents/projects/data-warehouse"
  :website "https://github.com/reifyhealth/data-diagrams")

(defproject emacs
  :project-dir "~/.emacs.d")

(defproject pyreify
  :project-dir "~/scratch/project-scratch/concept-data"
  :website   "https://github.com/reifyhealth/concept-data/"
  :conda-env "pyreify")

(defproject retool
  :project-dir "~/Documents/projects/retool-admin"
  :website   "https://github.com/reifyhealth/retool-admin/")

(defproject sql
   :init (sql-session-start-session))

(defproject zem
  :project-dir "~/Documents/projects/prefect-enrollment-prediction"
  :website
  "https://github.com/reifyhealth/prefect-enrollment-prediction"
  :conda-env   "prefect-zem")

(defproject knowledge-base
  :project-dir "~/Documents/projects/data-daze-spring-2022/knowledge-base"
  :website "http://github.com/reifyhealth/data-date-spring-2022"
  :init (my-cider-connect))

;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Scratch and Miscellany

;; TODO
;; Clean this up and put it in a macro
(evil-define-key 'normal 'evil-normal-state-map "'" 'evil-jump-item)
(evil-define-key 'visual 'evil-visual-state-map "'" 'evil-jump-item)

(evil-define-key 'normal 'evil-normal-state-map (kbd "C-k") 'comint-previous-input)
(evil-define-key 'insert 'evil-insert-state-map (kbd "C-k") 'comint-previous-input)
(evil-define-key 'normal 'evil-normal-state-map (kbd "C-j") 'comint-next-input)
(evil-define-key 'insert 'evil-insert-state-map (kbd "C-j") 'comint-next-input)
(evil-define-key 'normal 'evil-normal-state-map (kbd "C-c l") 'comint-clear-buffer)

;; Hacks!
(add-to-list 'exec-path "/usr/local/bin")
(setenv "PATH" (mapconcat 'identity exec-path ":"))
(put 'dired-find-alternate-file 'disabled nil)


(setq *end* (float-time))
(eirene-splash (- *end* *start*))
