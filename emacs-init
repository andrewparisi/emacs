;; -*- mode: emacs-lisp -*-

(setq *start* (float-time))


;; TODO: Find a better place for this maybe we need a general settings
;; section
(add-hook 'write-file-functions 'delete-trailing-whitespace)

(defmacro load! (load-string)
  (declare (indent defun))
  (let ((start (gensym "start")))
    `(let ((,start (float-time)))
       (load ,load-string)
       (message
	(format "done loading %s: %s"
		,load-string (- (float-time) ,start))))))

(setq user-mail-address "andrew.parisi@reifyhealth.com")

(load! "~/.emacs.d/display.el")
(load! "~/.emacs.d/modules.el")
(load! "~/.emacs.d/splash.el")
(load! "~/.emacs.d/eshell.el")
(load! "~/.emacs.d/workspace.el")

;;; Custom Work Helpers
(load! "~/emacs-files/timesheet.el")
(load! "~/emacs-files/diary-helpers.el")

;; Custom Theme

(colors!
 :background            "#3b3b3f"
 :foreground            "#d0d0d0"
 :comment               "#8a8a8a"
 :string                "#ffc63f"
 :constant              (:foreground "#ffc63f" :weight 'bold)
 :function              (:foreground "#18aed4" :weight 'bold)
 :keyword               (:foreground "#AFD75F" :weight 'bold)
 :type                  (:foreground "#18aed4")
 :font                  (:height 230)
 :transparency          ('alpha 90 90)
 :mode-line             (:foreground "#3b3b3f" :background "#d0d0d0")
 :mode-line-inactive    (:foreground "#3b3b3f" :background "#d0d0d0")
 :fringe                (:background "#d0d0d0"))

(mode-line!
  (:text " âš“ ")
  (:text  (mode-line-workspace))
  (:text "%*%+ ")
  (:text " %m: ")
  (:text "%b ")
  (:text "| envrc: ")
  (:text (format "%s" envrc--status)
	 :color "#30648e")
  (:text "| conda: ")
  (:text (format "%s" conda-env-current-name)
	 :color "#30648e"))

;; Custom Bindings

(defun messages-buffer ()
  (interactive)
  (switch-to-buffer "*Messages*"))

(defun scratch-buffer ()
  (interactive)
  (switch-to-buffer "*scratch*"))

(defun init-file ()
  (interactive)
  (find-file "~/.emacs.d/emacs-init"))

(defun modules-file()
  (interactive)
  (find-file "~/.emacs.d/modules.el"))

(defun core-file ()
  (interactive)
  (find-file "~/.emacs.d/core.el"))

(defun display-file ()
  (interactive)
  (find-file "~/.emacs.d/display.el"))

(defun keyboard-file ()
  (interactive)
  (find-file "~/.emacs.d/keyboard.el"))

(defun ivy-push-view-default-name ()
  (let* ((view (ivy--get-view-config))
         (view-name "{} organizer"))
    (when view-name
      (let ((x (assoc view-name ivy-views)))
        (if x
            (setcdr x (list view))
          (push (list view-name view) ivy-views))))))

(defun to-workspace-1 ()
  (interactive)
  (workspace-to-workspace-number 1))

(defun to-workspace-2 ()
  (interactive)
  (workspace-to-workspace-number 2))

(defun to-workspace-3 ()
  (interactive)
  (workspace-to-workspace-number 3))

(defun to-workspace-4 ()
  (interactive)
  (workspace-to-workspace-number 4))

(defun to-workspace-5 ()
  (interactive)
  (workspace-to-workspace-number 5))

(defun to-workspace-6 ()
  (interactive)
  (workspace-to-workspace-number 6))

(defun organizer-session()
    (interactive)
    (find-file "/Users/andrewparisi/org/status.org")
    (refresh-calendar-items)
    (evil-close-folds)
    (let* ((status-buffer (current-buffer))
           (year      (format-time-string "%Y"))
           (month     (format-time-string "%B"))
           (day       (format-time-string "%m-%d-%Y")))
      (org-agenda-list)
      (org-agenda-day-view)
      (let ((agenda-buffer (current-buffer)))
        (switch-to-buffer status-buffer)
        (delete-other-windows)
        (split-window-below)
        (other-window 1)
        (switch-to-buffer agenda-buffer)
        (other-window 1)
        (split-window-right)
        (other-window 1)
        (task-log)
        (other-window 1)
        (other-window 1)))
    (workspace--add-workspace-no-prompt 1 "{} orgnizer"))

(defun email ()
  (interactive)
  (delete-other-windows)
  (mu4e))

(which-key-map evil-normal-state-map ","
	       :labels
	       ("i"  "init"
		"t"  "tools"
		"tc" "conda"
		"ti" "lsp-ui-imenu"
		"oe" "edit-task"
		"p" "projectile"
		"w" "workspaces"
		"g"  "magit"
		"s"  "s-expression"
		"p"  "projectile"
		"t"  "tools")
	       :default-bindings
	       ("c"  'org-capture
		;; ibuffer
		"bi" 'ibuffer
		"bb" 'ivy-switch-buffer
		"bm" 'messages-buffer
		"bs" 'scratch-buffer
		"bw" 'save-buffer
		;; init
		"ii"  'init-file
		"im"  'modules-file
		"ic"  'core-file
		"id"  'display-file
		"ik"  'keyboard-file
  		;; magit
		"gs"  'magit-status
		"gc"  'magit-branch-checkout
		"gb"  'magit-blame
		"gl"  'magit-log-current
		;; projectile
		"p"   'projectile-command-map
		;; generic
		"x"  'counsel-M-x
		;; s-expressions
		"sq"  'indent-pp-sexp
		"sl"  'forward-sexp
		"sh"  'backward-sexp
		"st"  'transpose-sexps
		;; workspaces
		"w1"  'to-workspace-1
		"w2"  'to-workspace-2
		"w3"  'to-workspace-3
		"w4"  'to-workspace-4
		"w5"  'to-workspace-5
		"w6"  'to-workspace-6
		"wr"  'ivy-push-view
		"wd"  'workspace-pop
		"wj"  'ivy-switch-view
                ;; organizer
                "os"  'organizer-session
                "ol"  'task-log
                "ot"  'log-task
                "of"  'task-log-for-date
		"og"  'get-tasks-in-range
                "or"  'refresh-agenda
		"oa"  'add-calendar-item-for-today
		"oed" 'edit-task-description-at-point
		"oes" 'edit-task-start-time-at-point
		"oee" 'edit-task-end-time-at-point
		"oeg" 'edit-task-group-at-point
		;; projectile
		"p" 'projectile-command-map
		;; tools
		"tm"  'email
		"tca" 'conda-env-activate
		"tcd" 'conda-env-deactivate
		"tcs" 'conda-env-switch
		"tii" 'lsp-ui-imenu ;It's a little hacky to have this here
		"tiq" 'lsp-ui-imenu--kill
		"te" 'eshell))

;; TODO
;; Clean this up and put it in a macro
(evil-define-key 'normal 'evil-normal-state-map "[" 'evil-jump-item)
(evil-define-key 'visual 'evil-visual-state-map "[" 'evil-jump-item)

(evil-define-key 'normal 'evil-normal-state-map (kbd "C-k") 'comint-previous-input)
(evil-define-key 'insert 'evil-insert-state-map (kbd "C-k") 'comint-previous-input)
(evil-define-key 'normal 'evil-normal-state-map (kbd "C-j") 'comint-next-input)
(evil-define-key 'insert 'evil-insert-state-map (kbd "C-j") 'comint-next-input)
(evil-define-key 'normal 'org-mode-map (kbd "<tab>") #'org-cycle)

;; Hacks!
(add-to-list 'exec-path "/usr/local/bin")
(setenv "PATH" (mapconcat 'identity exec-path ":"))
(put 'dired-find-alternate-file 'disabled nil)


(setq *end* (float-time))
(memacs-splash (- *end* *start*))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(sql-interactive-mode which-key use-package undo-tree ttl-mode sqlformat sphinx-doc sparql-mode quelpa projectile ox-ipynb magit lsp-ui lsp-pyright ivy-rich haskell-mode flycheck evil-collection ess envrc csv-mode counsel conda company command-log-mode cider blacken)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
