(setq *start* (float-time))
(load "~/.emacs.d/display.el")
;; Keyboard loads Modules so we don't load it again.
(load "~/.emacs.d/keyboard.el")
(load "~/.emacs.d/splash.el")

(server-start)

;; Custom Theme

(colors!
 :background "#3b3b3f"
 :foreground "#d0d0d0"
 :comment "#8a8a8a"
 :string "#ffc63f"
 :constant (:foreground "#ffc63f" :weight 'bold)
 :function (:foreground "#18aed4" :weight 'bold)
 :keyword  (:foreground "#AFD75F" :weight 'bold)
 :type     (:foreground "#18aed4")
;; :fringe   (:background nil)
;; :transparency ('alpha 90 90)
 )

;; Custom Bindings

(defun messages-buffer ()
  (interactive)
  (switch-to-buffer "*Messages*"))

(defun init-file ()
  (interactive)
  (find-file "~/.emacs"))

(defun modules-file()
  (interactive)
  (find-file "~/.emacs.d/modules.el"))

(defun my-org-archive-done-tasks ()
    (interactive)
    (org-map-entries 'org-archive-subtree "/DONE" 'file))

(defun org-insert-code-block (language settings)
  (interactive "sLanguage: \nsSettings: ")
  (insert (format "#+begin_src %s %s\n\n" language settings))
  (forward-line)
  (insert (format "#+end_src\n"))
  (forward-line -2))
 

(which-key-map evil-normal-state-map ","
	       :labels
	       ("i" "init"
		"g" "magit"
		"s" "paredit"
		"v" "ivy view")
	       :default-bindings
	       (;; ibuffer
		"bi" 'ibuffer
		"bb" 'ivy-switch-buffer
		"bm" 'messages-buffer
		;; init
		"ii"  'init-file
		"im"  'modules-file
		;; magit
		"gs"  'magit-status
		;; generic
	        "x"  'counsel-M-x
	        ;; paredit mode
		"sq"  'indent-pp-sexp
		"sl"  'forward-sexp
		"sh"  'backward-sexp
		;; ivy view
		"vs"  'ivy-push-view
		"vd"  'ivy-pop-view
		)
	       :major-mode
	       ((org-mode-map
		 "a"  'org-agenda
		 "t"  'org-todo
		 "s"  'my-org-archive-done-tasks
		 "ic" 'org-insert-code-block
		 "c"  'org-mode-ctrl-c-ctrl-c
		 )
		(clojure-mode-map
		 "jj" 'cider-jack-in
		 "jc" 'cider-connect-clj
		 "jq" 'cider-quit
		 "s"  'cider-toggle-trace-var
		 "g"  'xref-find-definitions
		 "c"  'cider-eval-defun-at-point
		 )
		
		(magit-mode-map
		 "" 'magit-dispatch)
		)
	       )

(define-key evil-normal-state-map "[" 'evil-jump-item)
(define-key evil-visual-state-map "[" 'evil-jump-item)

(setq *end* (float-time))
(memacs-splash (- *end* *start*))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(org cider python lsp-mode magit clojure-mode conda evil-collection counsel ivy which-key use-package evil)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
